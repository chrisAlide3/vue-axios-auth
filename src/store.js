import Vue from 'vue'
import Vuex from 'vuex'
import axios from './axios-auth'
import axiosGlobal from 'axios'
import router from './router'

Vue.use(Vuex)

export default new Vuex.Store({
  state: {
    idToken: null,
    userId: null,
    user: null
  },
  mutations: {
    SIGN_IN (state, user) {
      state.idToken = user.token
      state.userId = user.id
    },
    LOGOUT (state) {
      state.idToken = null
      state.userId = null
      state.user = null
      router.replace('/signin')
    },
    storeUser (state, user) {
      state.user = user
    }
  },
  actions: {
    setLogoutTimer ({ commit }, expirationTime) {
      setTimeout(() => {
        commit('LOGOUT')
      }, expirationTime * 1000)
    },
    signUp ({ commit, dispatch }, authData) {
      axios.post('/signupNewUser?key=AIzaSyAB9SiVln_5agxOv36aMh2bWpdFOwi9raA', {
        email: authData.email,
        password: authData.password,
        returnSecureToken: true
      })
        .then(res => {
          console.log(res)

          // Store token to local storage
          localStorage.setItem('token', res.data.idToken)
          // Store expiration date and time in local storage
          const now = new Date()
          const expirationDate = new Date(now.getTime() + res.data.expiresIn * 1000)
          localStorage.setItem('expiresOn', expirationDate)
          localStorage.setItem('userId', res.data.localId)

          const user = {
            id: res.data.localId, 
            token: res.data.idToken
          }
          commit('SIGN_IN', user)
          dispatch('storeUser', authData)
          dispatch('setLogoutTimer', res.data.expiresIn)
        })
        .catch(error => {
          console.log(error)
        })
    },
    login ({ commit, dispatch }, authData) {
      axios.post('/verifyPassword?key=AIzaSyAB9SiVln_5agxOv36aMh2bWpdFOwi9raA', {
        email: authData.email,
        password: authData.password,
        returnSecureToken: true
      })
        .then(res => {
          console.log(res)

          // Store token to local storage
          localStorage.setItem('token', res.data.idToken)
          // Store expiration date and time in local storage
          const now = new Date()
          const expirationDate = new Date(now.getTime() + res.data.expiresIn * 1000)
          localStorage.setItem('expiresOn', expirationDate)
          localStorage.setItem('userId', res.data.localId)

          const user = {
            id: res.data.localId, 
            token: res.data.idToken
          }
          commit('SIGN_IN', user)
          dispatch('setLogoutTimer', res.data.expiresIn)
        })
        .catch(error => {
          console.log(error)
        })
    },
    tryAutoLogin ({ commit }) {
      const token = localStorage.getItem('token')
      if (!token) {
        return
      }
      const expirationDate = localStorage.getItem('expiresOn')
      const now = new Date()
      if (now >= expirationDate) {
        return
      }
      const userId = localStorage.getItem('userId')
      const user = {
        id: userId,
        token: token
      }
      commit('SIGN_IN', user)
    },
    logout ({commit}) {
      commit('LOGOUT')
      localStorage.removeItem('token')
      localStorage.removeItem('expiresOn')
      localStorage.removeItem('userId')
    },
    storeUser ({ commit, state }, formData) {
      if (state.idToken) {
        // Passing the token depends of the backend. Some want it in the header
        // Firebase wants query params '?auth=token'
        formData.id = state.userId
        axiosGlobal.post('/users.json' + '?auth=' + state.idToken, formData)
        .then(res => console.log(res))
        .catch(err => console.log(err))
      }
    },
    fetchUser ({ commit, state }) {
      if (!state.idToken) {
        return
      }
      axiosGlobal.get('/users.json/' + '?auth=' + state.idToken)
      .then(response => {
        console.log(response)
        // The data return by axios is an object not an array with a key generated by firebase
        // we need to loop through the response.data with a 'for in' loop and push each element to a new array (users)
        // 'for in' loop returns the key. To return values you need 'for of' loop
        const users = []
        const data = response.data
        for (let key in data) {
          // key will hold the generated firebase key of the data record
          // setting user = data[key] sets the user with all the object data
          const user = data[key]
          // we add id as new property to the user object to hold the key
          user.id = key
          // we push the user object to the users array
          users.push(user)
        }
        console.log(users)
        // set the email from the first user in the users array
        commit('storeUser', users[0])
      })
      .catch(error => {
        console.log(error)
      })
    }
  },
  getters: {
    user (state) {
      return state.user
    },
    isAuthenticated (state) {
      return state.idToken !== null
    }
  }
})